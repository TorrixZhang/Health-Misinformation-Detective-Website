{"ast":null,"code":"var _jsxFileName = \"/Users/jiayue/7381-website/src/pages/Auth.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport jwt from \"jsonwebtoken\";\nimport React, { useState, createContext, useContext, useEffect } from \"react\";\nimport { ApolloLink, useQuery, gql } from \"@apollo/client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst REFRESH_TOKEN = \"refresh_token\";\nconst ACCESS_TOKEN = \"access_token\";\n\nasync function fetchAuthAPI(url, body) {\n  let authorization = await getBearerToken();\n  const options = {\n    method: \"post\",\n    headers: {\n      \"Content-type\": \"application/json\",\n      Authorization: authorization\n    },\n    body: JSON.stringify(body)\n  };\n  const result = await fetch(`http://localhost:9000${url}`, options).then(response => response.json());\n  return result;\n}\n\nasync function getBearerToken() {\n  const accessToken = await getAccessToken();\n  let authorization = \"\";\n\n  if (accessToken) {\n    authorization = `Bearer ${accessToken}`;\n  }\n\n  return authorization;\n}\n\nasync function getRefreshToken() {\n  var _data;\n\n  const refreshToken = localStorage.getItem(REFRESH_TOKEN);\n  let data = null;\n\n  try {\n    data = await fetchAuthAPI(\"/auth/token/refresh/\", {\n      refresh: refreshToken\n    });\n  } catch (e) {\n    console.log(e);\n  }\n\n  if ((_data = data) !== null && _data !== void 0 && _data.access) {\n    localStorage.setItem(ACCESS_TOKEN, data.access);\n    return data.access;\n  }\n}\n\nasync function getAccessToken() {\n  let accessToken = localStorage.getItem(ACCESS_TOKEN);\n  let refreshToken = localStorage.getItem(REFRESH_TOKEN); // If we have an access token and it isn't set to undefined\n  // Lets use it.\n\n  if (accessToken && accessToken !== \"undefined\") {\n    const decoded_data = jwt.decode(accessToken); // TODO: Rework date refresh stuff\n\n    const currentTime = Math.floor(Date.now() / 1000); // If the accessToken has expired lets refresh it\n\n    if (currentTime > decoded_data.exp) {\n      console.log(\"Refreshing Token\");\n      accessToken = await getRefreshToken();\n      return accessToken;\n    } // If the access token has not expired lets use it\n\n\n    return accessToken;\n  } else if (refreshToken) {\n    // if there is no accesstoken or it is undefined, but we have\n    // a refresh token lets refresh and use that access token.\n    accessToken = await getRefreshToken();\n    return accessToken;\n  } // Should not actually hit here.\n\n\n  return accessToken;\n}\n\nconst authMiddleware = new ApolloLink(async (operation, forward) => {\n  let authorization = await getBearerToken();\n  operation.setContext({\n    headers: {\n      authorization\n    }\n  });\n  return forward(operation);\n});\nconst USER_QUERY = gql`\n  query currentUser {\n    getCurrentUser {\n      id\n      username\n    }\n  }\n`;\nconst UserContext = /*#__PURE__*/createContext(null);\n\nconst UserProvider = props => {\n  _s();\n\n  const [user, setUser] = useState(null);\n  const {\n    data\n  } = useQuery(USER_QUERY);\n  useEffect(() => {\n    if (data) {\n      setUser(data.getCurrentUser);\n    }\n  }, [data]);\n\n  const login = (username, password) => {\n    fetchAuthAPI(\"/auth/login/\", {\n      username,\n      password\n    }).then(data => {\n      localStorage.setItem(ACCESS_TOKEN, data.access_token);\n      localStorage.setItem(REFRESH_TOKEN, data.refresh_token);\n      setUser(data.user);\n    });\n  };\n\n  const logout = () => {\n    fetchAuthAPI(\"/auth/logout/\", {\n      token: localStorage.getItem(ACCESS_TOKEN)\n    }).then(data => {\n      localStorage.removeItem(ACCESS_TOKEN);\n      localStorage.removeItem(REFRESH_TOKEN);\n      setUser(null);\n    });\n  };\n\n  const register = (email, password1, password2) => {\n    fetchAuthAPI(\"/auth/registration/\", {\n      username: email,\n      password1,\n      password2\n    }).then(data => {\n      localStorage.setItem(ACCESS_TOKEN, data.access_token);\n      localStorage.setItem(REFRESH_TOKEN, data.refresh_token);\n      setUser(data.user);\n    });\n  };\n\n  const passwordReset = email => {\n    fetchAuthAPI(\"/auth/password/reset/\", {\n      email\n    }).then(data => {\n      console.log(data);\n    });\n  };\n\n  const passwordResetConfirm = (password1, password2, uid, token) => {\n    fetchAuthAPI(\"/auth/password/reset/confirm/\", {\n      password1,\n      password2,\n      uid,\n      token\n    }).then(data => {\n      console.log(data);\n    });\n  };\n\n  const passwordChange = (oldPassword, password1, password2) => {\n    fetchAuthAPI(\"/auth/password/change/\", {\n      oldPassword,\n      new_password1: password1,\n      new_password2: password2\n    }).then(data => {\n      console.log(data);\n    });\n  };\n\n  const userContextValue = {\n    login,\n    logout,\n    user,\n    register,\n    passwordReset,\n    passwordResetConfirm,\n    passwordChange\n  };\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: userContextValue,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 179,\n    columnNumber: 10\n  }, this);\n};\n\n_s(UserProvider, \"/bVWoaciuJX2OMcb0jJdJLGHoE0=\", false, function () {\n  return [useQuery];\n});\n\n_c = UserProvider;\n\nconst useAuth = () => {\n  _s2();\n\n  return useContext(UserContext);\n};\n\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport { authMiddleware, UserProvider, useAuth };\n\nvar _c;\n\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"names":["jwt","React","useState","createContext","useContext","useEffect","ApolloLink","useQuery","gql","REFRESH_TOKEN","ACCESS_TOKEN","fetchAuthAPI","url","body","authorization","getBearerToken","options","method","headers","Authorization","JSON","stringify","result","fetch","then","response","json","accessToken","getAccessToken","getRefreshToken","refreshToken","localStorage","getItem","data","refresh","e","console","log","access","setItem","decoded_data","decode","currentTime","Math","floor","Date","now","exp","authMiddleware","operation","forward","setContext","USER_QUERY","UserContext","UserProvider","props","user","setUser","getCurrentUser","login","username","password","access_token","refresh_token","logout","token","removeItem","register","email","password1","password2","passwordReset","passwordResetConfirm","uid","passwordChange","oldPassword","new_password1","new_password2","userContextValue","children","useAuth"],"sources":["/Users/jiayue/7381-website/src/pages/Auth.js"],"sourcesContent":["import jwt from \"jsonwebtoken\"\nimport React, { useState, createContext, useContext, useEffect } from \"react\"\n\nimport { ApolloLink, useQuery, gql } from \"@apollo/client\"\n\nconst REFRESH_TOKEN = \"refresh_token\"\nconst ACCESS_TOKEN = \"access_token\"\n\nasync function fetchAuthAPI(url, body) {\n  let authorization = await getBearerToken()\n\n  const options = {\n    method: \"post\",\n    headers: {\n      \"Content-type\": \"application/json\",\n      Authorization: authorization,\n    },\n    body: JSON.stringify(body),\n  }\n\n  const result = await fetch(`http://localhost:9000${url}`, options).then((response) =>\n    response.json()\n  )\n  return result\n}\n\nasync function getBearerToken() {\n  const accessToken = await getAccessToken()\n  let authorization = \"\"\n\n  if (accessToken) {\n    authorization = `Bearer ${accessToken}`\n  }\n  return authorization\n}\n\nasync function getRefreshToken() {\n  const refreshToken = localStorage.getItem(REFRESH_TOKEN)\n  let data = null\n  try {\n    data = await fetchAuthAPI(\"/auth/token/refresh/\", {\n      refresh: refreshToken,\n    })\n  } catch (e) {\n    console.log(e)\n  }\n  if (data?.access) {\n    localStorage.setItem(ACCESS_TOKEN, data.access)\n    return data.access\n  }\n}\n\nasync function getAccessToken() {\n  let accessToken = localStorage.getItem(ACCESS_TOKEN)\n  let refreshToken = localStorage.getItem(REFRESH_TOKEN)\n\n  // If we have an access token and it isn't set to undefined\n  // Lets use it.\n  if (accessToken && accessToken !== \"undefined\") {\n    const decoded_data = jwt.decode(accessToken)\n\n    // TODO: Rework date refresh stuff\n    const currentTime = Math.floor(Date.now() / 1000)\n\n    // If the accessToken has expired lets refresh it\n    if (currentTime > decoded_data.exp) {\n      console.log(\"Refreshing Token\")\n      accessToken = await getRefreshToken()\n      return accessToken\n    }\n\n    // If the access token has not expired lets use it\n    return accessToken\n  } else if (refreshToken) {\n    // if there is no accesstoken or it is undefined, but we have\n    // a refresh token lets refresh and use that access token.\n    accessToken = await getRefreshToken()\n    return accessToken\n  }\n\n  // Should not actually hit here.\n  return accessToken\n}\n\nconst authMiddleware = new ApolloLink(async (operation, forward) => {\n  let authorization = await getBearerToken()\n\n  operation.setContext({\n    headers: {\n      authorization,\n    },\n  })\n\n  return forward(operation)\n})\n\nconst USER_QUERY = gql`\n  query currentUser {\n    getCurrentUser {\n      id\n      username\n    }\n  }\n`\n\nconst UserContext = createContext(null)\n\nconst UserProvider = (props) => {\n  const [user, setUser] = useState(null)\n\n  const { data } = useQuery(USER_QUERY)\n\n  useEffect(() => {\n    if (data) {\n      setUser(data.getCurrentUser)\n    }\n  }, [data])\n\n  const login = (username, password) => {\n    fetchAuthAPI(\"/auth/login/\", { username, password }).then((data) => {\n      localStorage.setItem(ACCESS_TOKEN, data.access_token)\n      localStorage.setItem(REFRESH_TOKEN, data.refresh_token)\n      setUser(data.user)\n    })\n  }\n\n  const logout = () => {\n    fetchAuthAPI(\"/auth/logout/\", {\n      token: localStorage.getItem(ACCESS_TOKEN),\n    }).then((data) => {\n      localStorage.removeItem(ACCESS_TOKEN)\n      localStorage.removeItem(REFRESH_TOKEN)\n      setUser(null)\n    })\n  }\n\n  const register = (email, password1, password2) => {\n    fetchAuthAPI(\"/auth/registration/\", { username: email, password1, password2 }).then((data) => {\n      localStorage.setItem(ACCESS_TOKEN, data.access_token)\n      localStorage.setItem(REFRESH_TOKEN, data.refresh_token)\n      setUser(data.user)\n    })\n  }\n\n  const passwordReset = (email) => {\n    fetchAuthAPI(\"/auth/password/reset/\", { email }).then((data) => {\n      console.log(data)\n    })\n  }\n\n  const passwordResetConfirm = (password1, password2, uid, token) => {\n    fetchAuthAPI(\"/auth/password/reset/confirm/\", { password1, password2, uid, token }).then(\n      (data) => {\n        console.log(data)\n      }\n    )\n  }\n\n  const passwordChange = (oldPassword, password1, password2) => {\n    fetchAuthAPI(\"/auth/password/change/\", {\n      oldPassword,\n      new_password1: password1,\n      new_password2: password2,\n    }).then((data) => {\n      console.log(data)\n    })\n  }\n\n  const userContextValue = {\n    login,\n    logout,\n    user,\n    register,\n    passwordReset,\n    passwordResetConfirm,\n    passwordChange,\n  }\n\n  return <UserContext.Provider value={userContextValue}>{props.children}</UserContext.Provider>\n}\n\nconst useAuth = () => useContext(UserContext)\n\nexport { authMiddleware, UserProvider, useAuth }\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}