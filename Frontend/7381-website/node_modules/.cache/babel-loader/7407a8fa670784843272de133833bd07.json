{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport toArray from \"rc-util/es/Children/toArray\";\nimport warning from \"rc-util/es/warning\";\nimport { getPosition, isTreeNode } from '../util';\nexport function getKey(key, pos) {\n  if (key !== null && key !== undefined) {\n    return key;\n  }\n\n  return pos;\n}\n/**\n * Warning if TreeNode do not provides key\n */\n\nexport function warningWithoutKey() {\n  var treeData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var keys = new Map();\n\n  function dig(list) {\n    var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    (list || []).forEach(function (treeNode) {\n      var key = treeNode.key,\n          children = treeNode.children;\n      warning(key !== null && key !== undefined, \"Tree node must have a certain key: [\".concat(path).concat(key, \"]\"));\n      var recordKey = String(key);\n      warning(!keys.has(recordKey) || key === null || key === undefined, \"Same 'key' exist in the Tree: \".concat(recordKey));\n      keys.set(recordKey, true);\n      dig(children, \"\".concat(path).concat(recordKey, \" > \"));\n    });\n  }\n\n  dig(treeData);\n}\n/**\n * Convert `children` of Tree into `treeData` structure.\n */\n\nexport function convertTreeToData(rootNodes) {\n  function dig(node) {\n    var treeNodes = toArray(node);\n    return treeNodes.map(function (treeNode) {\n      // Filter invalidate node\n      if (!isTreeNode(treeNode)) {\n        warning(!treeNode, 'Tree/TreeNode can only accept TreeNode as children.');\n        return null;\n      }\n\n      var key = treeNode.key;\n\n      var _treeNode$props = treeNode.props,\n          children = _treeNode$props.children,\n          rest = _objectWithoutProperties(_treeNode$props, [\"children\"]);\n\n      var dataNode = _objectSpread({\n        key: key\n      }, rest);\n\n      var parsedChildren = dig(children);\n\n      if (parsedChildren.length) {\n        dataNode.children = parsedChildren;\n      }\n\n      return dataNode;\n    }).filter(function (dataNode) {\n      return dataNode;\n    });\n  }\n\n  return dig(rootNodes);\n}\n/**\n * Flat nest tree data into flatten list. This is used for virtual list render.\n * @param treeNodeList Origin data node list\n * @param expandedKeys\n * need expanded keys, provides `true` means all expanded (used in `rc-tree-select`).\n */\n\nexport function flattenTreeData() {\n  var treeNodeList = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var expandedKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var expandedKeySet = new Set(expandedKeys === true ? [] : expandedKeys);\n  var flattenList = [];\n\n  function dig(list) {\n    var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return list.map(function (treeNode, index) {\n      var pos = getPosition(parent ? parent.pos : '0', index);\n      var mergedKey = getKey(treeNode.key, pos); // Add FlattenDataNode into list\n\n      var flattenNode = _objectSpread(_objectSpread({}, treeNode), {}, {\n        parent: parent,\n        pos: pos,\n        children: null,\n        data: treeNode,\n        isStart: [].concat(_toConsumableArray(parent ? parent.isStart : []), [index === 0]),\n        isEnd: [].concat(_toConsumableArray(parent ? parent.isEnd : []), [index === list.length - 1])\n      });\n\n      flattenList.push(flattenNode); // Loop treeNode children\n\n      if (expandedKeys === true || expandedKeySet.has(mergedKey)) {\n        flattenNode.children = dig(treeNode.children || [], flattenNode);\n      } else {\n        flattenNode.children = [];\n      }\n\n      return flattenNode;\n    });\n  }\n\n  dig(treeNodeList);\n  return flattenList;\n}\n/**\n * Traverse all the data by `treeData`.\n * Please not use it out of the `rc-tree` since we may refactor this code.\n */\n\nexport function traverseDataNodes(dataNodes, callback, externalGetKey) {\n  var syntheticGetKey;\n\n  if (externalGetKey) {\n    if (typeof externalGetKey === 'string') {\n      syntheticGetKey = function syntheticGetKey(node) {\n        return node[externalGetKey];\n      };\n    } else if (typeof externalGetKey === 'function') {\n      syntheticGetKey = function syntheticGetKey(node) {\n        return externalGetKey(node);\n      };\n    }\n  } else {\n    syntheticGetKey = function syntheticGetKey(node, pos) {\n      return getKey(node.key, pos);\n    };\n  }\n\n  function processNode(node, index, parent) {\n    var children = node ? node.children : dataNodes;\n    var pos = node ? getPosition(parent.pos, index) : '0'; // Process node if is not root\n\n    if (node) {\n      var key = syntheticGetKey(node, pos);\n      var data = {\n        node: node,\n        index: index,\n        pos: pos,\n        key: key,\n        parentPos: parent.node ? parent.pos : null,\n        level: parent.level + 1\n      };\n      callback(data);\n    } // Process children node\n\n\n    if (children) {\n      children.forEach(function (subNode, subIndex) {\n        processNode(subNode, subIndex, {\n          node: node,\n          pos: pos,\n          level: parent ? parent.level + 1 : -1\n        });\n      });\n    }\n  }\n\n  processNode(null);\n}\n/**\n * Convert `treeData` into entity records.\n */\n\nexport function convertDataToEntities(dataNodes) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      initWrapper = _ref.initWrapper,\n      processEntity = _ref.processEntity,\n      onProcessFinished = _ref.onProcessFinished;\n\n  var externalGetKey = arguments.length > 2 ? arguments[2] : undefined;\n  var posEntities = {};\n  var keyEntities = {};\n  var wrapper = {\n    posEntities: posEntities,\n    keyEntities: keyEntities\n  };\n\n  if (initWrapper) {\n    wrapper = initWrapper(wrapper) || wrapper;\n  }\n\n  traverseDataNodes(dataNodes, function (item) {\n    var node = item.node,\n        index = item.index,\n        pos = item.pos,\n        key = item.key,\n        parentPos = item.parentPos,\n        level = item.level;\n    var entity = {\n      node: node,\n      index: index,\n      key: key,\n      pos: pos,\n      level: level\n    };\n    var mergedKey = getKey(key, pos);\n    posEntities[pos] = entity;\n    keyEntities[mergedKey] = entity; // Fill children\n\n    entity.parent = posEntities[parentPos];\n\n    if (entity.parent) {\n      entity.parent.children = entity.parent.children || [];\n      entity.parent.children.push(entity);\n    }\n\n    if (processEntity) {\n      processEntity(entity, wrapper);\n    }\n  }, externalGetKey);\n\n  if (onProcessFinished) {\n    onProcessFinished(wrapper);\n  }\n\n  return wrapper;\n}\n/**\n * Get TreeNode props with Tree props.\n */\n\nexport function getTreeNodeProps(key, _ref2) {\n  var expandedKeys = _ref2.expandedKeys,\n      selectedKeys = _ref2.selectedKeys,\n      loadedKeys = _ref2.loadedKeys,\n      loadingKeys = _ref2.loadingKeys,\n      checkedKeys = _ref2.checkedKeys,\n      halfCheckedKeys = _ref2.halfCheckedKeys,\n      dragOverNodeKey = _ref2.dragOverNodeKey,\n      dropPosition = _ref2.dropPosition,\n      keyEntities = _ref2.keyEntities;\n  var entity = keyEntities[key];\n  var treeNodeProps = {\n    eventKey: key,\n    expanded: expandedKeys.indexOf(key) !== -1,\n    selected: selectedKeys.indexOf(key) !== -1,\n    loaded: loadedKeys.indexOf(key) !== -1,\n    loading: loadingKeys.indexOf(key) !== -1,\n    checked: checkedKeys.indexOf(key) !== -1,\n    halfChecked: halfCheckedKeys.indexOf(key) !== -1,\n    pos: String(entity ? entity.pos : ''),\n    // [Legacy] Drag props\n    dragOver: dragOverNodeKey === key && dropPosition === 0,\n    dragOverGapTop: dragOverNodeKey === key && dropPosition === -1,\n    dragOverGapBottom: dragOverNodeKey === key && dropPosition === 1\n  };\n  return treeNodeProps;\n}\nexport function convertNodePropsToEventData(props) {\n  var data = props.data,\n      expanded = props.expanded,\n      selected = props.selected,\n      checked = props.checked,\n      loaded = props.loaded,\n      loading = props.loading,\n      halfChecked = props.halfChecked,\n      dragOver = props.dragOver,\n      dragOverGapTop = props.dragOverGapTop,\n      dragOverGapBottom = props.dragOverGapBottom,\n      pos = props.pos,\n      active = props.active;\n\n  var eventData = _objectSpread(_objectSpread({}, data), {}, {\n    expanded: expanded,\n    selected: selected,\n    checked: checked,\n    loaded: loaded,\n    loading: loading,\n    halfChecked: halfChecked,\n    dragOver: dragOver,\n    dragOverGapTop: dragOverGapTop,\n    dragOverGapBottom: dragOverGapBottom,\n    pos: pos,\n    active: active\n  });\n\n  if (!('props' in eventData)) {\n    Object.defineProperty(eventData, 'props', {\n      get: function get() {\n        warning(false, 'Second param return from event is node data instead of TreeNode instance. Please read value directly instead of reading from `props`.');\n        return props;\n      }\n    });\n  }\n\n  return eventData;\n}","map":{"version":3,"names":["_toConsumableArray","_objectSpread","_objectWithoutProperties","toArray","warning","getPosition","isTreeNode","getKey","key","pos","undefined","warningWithoutKey","treeData","arguments","length","keys","Map","dig","list","path","forEach","treeNode","children","concat","recordKey","String","has","set","convertTreeToData","rootNodes","node","treeNodes","map","_treeNode$props","props","rest","dataNode","parsedChildren","filter","flattenTreeData","treeNodeList","expandedKeys","expandedKeySet","Set","flattenList","parent","index","mergedKey","flattenNode","data","isStart","isEnd","push","traverseDataNodes","dataNodes","callback","externalGetKey","syntheticGetKey","processNode","parentPos","level","subNode","subIndex","convertDataToEntities","_ref","initWrapper","processEntity","onProcessFinished","posEntities","keyEntities","wrapper","item","entity","getTreeNodeProps","_ref2","selectedKeys","loadedKeys","loadingKeys","checkedKeys","halfCheckedKeys","dragOverNodeKey","dropPosition","treeNodeProps","eventKey","expanded","indexOf","selected","loaded","loading","checked","halfChecked","dragOver","dragOverGapTop","dragOverGapBottom","convertNodePropsToEventData","active","eventData","Object","defineProperty","get"],"sources":["/Users/jiayue/7381-website/node_modules/rc-tree/es/utils/treeUtil.js"],"sourcesContent":["import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport toArray from \"rc-util/es/Children/toArray\";\nimport warning from \"rc-util/es/warning\";\nimport { getPosition, isTreeNode } from '../util';\nexport function getKey(key, pos) {\n  if (key !== null && key !== undefined) {\n    return key;\n  }\n\n  return pos;\n}\n/**\n * Warning if TreeNode do not provides key\n */\n\nexport function warningWithoutKey() {\n  var treeData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var keys = new Map();\n\n  function dig(list) {\n    var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    (list || []).forEach(function (treeNode) {\n      var key = treeNode.key,\n          children = treeNode.children;\n      warning(key !== null && key !== undefined, \"Tree node must have a certain key: [\".concat(path).concat(key, \"]\"));\n      var recordKey = String(key);\n      warning(!keys.has(recordKey) || key === null || key === undefined, \"Same 'key' exist in the Tree: \".concat(recordKey));\n      keys.set(recordKey, true);\n      dig(children, \"\".concat(path).concat(recordKey, \" > \"));\n    });\n  }\n\n  dig(treeData);\n}\n/**\n * Convert `children` of Tree into `treeData` structure.\n */\n\nexport function convertTreeToData(rootNodes) {\n  function dig(node) {\n    var treeNodes = toArray(node);\n    return treeNodes.map(function (treeNode) {\n      // Filter invalidate node\n      if (!isTreeNode(treeNode)) {\n        warning(!treeNode, 'Tree/TreeNode can only accept TreeNode as children.');\n        return null;\n      }\n\n      var key = treeNode.key;\n\n      var _treeNode$props = treeNode.props,\n          children = _treeNode$props.children,\n          rest = _objectWithoutProperties(_treeNode$props, [\"children\"]);\n\n      var dataNode = _objectSpread({\n        key: key\n      }, rest);\n\n      var parsedChildren = dig(children);\n\n      if (parsedChildren.length) {\n        dataNode.children = parsedChildren;\n      }\n\n      return dataNode;\n    }).filter(function (dataNode) {\n      return dataNode;\n    });\n  }\n\n  return dig(rootNodes);\n}\n/**\n * Flat nest tree data into flatten list. This is used for virtual list render.\n * @param treeNodeList Origin data node list\n * @param expandedKeys\n * need expanded keys, provides `true` means all expanded (used in `rc-tree-select`).\n */\n\nexport function flattenTreeData() {\n  var treeNodeList = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var expandedKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var expandedKeySet = new Set(expandedKeys === true ? [] : expandedKeys);\n  var flattenList = [];\n\n  function dig(list) {\n    var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return list.map(function (treeNode, index) {\n      var pos = getPosition(parent ? parent.pos : '0', index);\n      var mergedKey = getKey(treeNode.key, pos); // Add FlattenDataNode into list\n\n      var flattenNode = _objectSpread(_objectSpread({}, treeNode), {}, {\n        parent: parent,\n        pos: pos,\n        children: null,\n        data: treeNode,\n        isStart: [].concat(_toConsumableArray(parent ? parent.isStart : []), [index === 0]),\n        isEnd: [].concat(_toConsumableArray(parent ? parent.isEnd : []), [index === list.length - 1])\n      });\n\n      flattenList.push(flattenNode); // Loop treeNode children\n\n      if (expandedKeys === true || expandedKeySet.has(mergedKey)) {\n        flattenNode.children = dig(treeNode.children || [], flattenNode);\n      } else {\n        flattenNode.children = [];\n      }\n\n      return flattenNode;\n    });\n  }\n\n  dig(treeNodeList);\n  return flattenList;\n}\n/**\n * Traverse all the data by `treeData`.\n * Please not use it out of the `rc-tree` since we may refactor this code.\n */\n\nexport function traverseDataNodes(dataNodes, callback, externalGetKey) {\n  var syntheticGetKey;\n\n  if (externalGetKey) {\n    if (typeof externalGetKey === 'string') {\n      syntheticGetKey = function syntheticGetKey(node) {\n        return node[externalGetKey];\n      };\n    } else if (typeof externalGetKey === 'function') {\n      syntheticGetKey = function syntheticGetKey(node) {\n        return externalGetKey(node);\n      };\n    }\n  } else {\n    syntheticGetKey = function syntheticGetKey(node, pos) {\n      return getKey(node.key, pos);\n    };\n  }\n\n  function processNode(node, index, parent) {\n    var children = node ? node.children : dataNodes;\n    var pos = node ? getPosition(parent.pos, index) : '0'; // Process node if is not root\n\n    if (node) {\n      var key = syntheticGetKey(node, pos);\n      var data = {\n        node: node,\n        index: index,\n        pos: pos,\n        key: key,\n        parentPos: parent.node ? parent.pos : null,\n        level: parent.level + 1\n      };\n      callback(data);\n    } // Process children node\n\n\n    if (children) {\n      children.forEach(function (subNode, subIndex) {\n        processNode(subNode, subIndex, {\n          node: node,\n          pos: pos,\n          level: parent ? parent.level + 1 : -1\n        });\n      });\n    }\n  }\n\n  processNode(null);\n}\n/**\n * Convert `treeData` into entity records.\n */\n\nexport function convertDataToEntities(dataNodes) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      initWrapper = _ref.initWrapper,\n      processEntity = _ref.processEntity,\n      onProcessFinished = _ref.onProcessFinished;\n\n  var externalGetKey = arguments.length > 2 ? arguments[2] : undefined;\n  var posEntities = {};\n  var keyEntities = {};\n  var wrapper = {\n    posEntities: posEntities,\n    keyEntities: keyEntities\n  };\n\n  if (initWrapper) {\n    wrapper = initWrapper(wrapper) || wrapper;\n  }\n\n  traverseDataNodes(dataNodes, function (item) {\n    var node = item.node,\n        index = item.index,\n        pos = item.pos,\n        key = item.key,\n        parentPos = item.parentPos,\n        level = item.level;\n    var entity = {\n      node: node,\n      index: index,\n      key: key,\n      pos: pos,\n      level: level\n    };\n    var mergedKey = getKey(key, pos);\n    posEntities[pos] = entity;\n    keyEntities[mergedKey] = entity; // Fill children\n\n    entity.parent = posEntities[parentPos];\n\n    if (entity.parent) {\n      entity.parent.children = entity.parent.children || [];\n      entity.parent.children.push(entity);\n    }\n\n    if (processEntity) {\n      processEntity(entity, wrapper);\n    }\n  }, externalGetKey);\n\n  if (onProcessFinished) {\n    onProcessFinished(wrapper);\n  }\n\n  return wrapper;\n}\n/**\n * Get TreeNode props with Tree props.\n */\n\nexport function getTreeNodeProps(key, _ref2) {\n  var expandedKeys = _ref2.expandedKeys,\n      selectedKeys = _ref2.selectedKeys,\n      loadedKeys = _ref2.loadedKeys,\n      loadingKeys = _ref2.loadingKeys,\n      checkedKeys = _ref2.checkedKeys,\n      halfCheckedKeys = _ref2.halfCheckedKeys,\n      dragOverNodeKey = _ref2.dragOverNodeKey,\n      dropPosition = _ref2.dropPosition,\n      keyEntities = _ref2.keyEntities;\n  var entity = keyEntities[key];\n  var treeNodeProps = {\n    eventKey: key,\n    expanded: expandedKeys.indexOf(key) !== -1,\n    selected: selectedKeys.indexOf(key) !== -1,\n    loaded: loadedKeys.indexOf(key) !== -1,\n    loading: loadingKeys.indexOf(key) !== -1,\n    checked: checkedKeys.indexOf(key) !== -1,\n    halfChecked: halfCheckedKeys.indexOf(key) !== -1,\n    pos: String(entity ? entity.pos : ''),\n    // [Legacy] Drag props\n    dragOver: dragOverNodeKey === key && dropPosition === 0,\n    dragOverGapTop: dragOverNodeKey === key && dropPosition === -1,\n    dragOverGapBottom: dragOverNodeKey === key && dropPosition === 1\n  };\n  return treeNodeProps;\n}\nexport function convertNodePropsToEventData(props) {\n  var data = props.data,\n      expanded = props.expanded,\n      selected = props.selected,\n      checked = props.checked,\n      loaded = props.loaded,\n      loading = props.loading,\n      halfChecked = props.halfChecked,\n      dragOver = props.dragOver,\n      dragOverGapTop = props.dragOverGapTop,\n      dragOverGapBottom = props.dragOverGapBottom,\n      pos = props.pos,\n      active = props.active;\n\n  var eventData = _objectSpread(_objectSpread({}, data), {}, {\n    expanded: expanded,\n    selected: selected,\n    checked: checked,\n    loaded: loaded,\n    loading: loading,\n    halfChecked: halfChecked,\n    dragOver: dragOver,\n    dragOverGapTop: dragOverGapTop,\n    dragOverGapBottom: dragOverGapBottom,\n    pos: pos,\n    active: active\n  });\n\n  if (!('props' in eventData)) {\n    Object.defineProperty(eventData, 'props', {\n      get: function get() {\n        warning(false, 'Second param return from event is node data instead of TreeNode instance. Please read value directly instead of reading from `props`.');\n        return props;\n      }\n    });\n  }\n\n  return eventData;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}